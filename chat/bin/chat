#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../chat');
var debug = require('debug')('char:server');
var http = require('http');
var mongoose = require('mongoose');
var config = require('../config');

/**
 * Get port from environment and store in Express.
 */

var port = config.port;

app.set('port', normalizePort(port));

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  //debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}

/**
 * Connection to MongoDB
 */

if(config.dbAccess == 'server'){
    var options = { server: { socketOptions: { keepAlive: 1 } }, uri_decode_auth: true  };
    var db = config.database['server'];

    var connectionString = "mongodb://" + db.username + ":" + db.password + "@" + db.host + ":" + db.port + "/" + db.dbName + "?authSource=" + db.authDb
    console.log("connectionString : ", connectionString);
    mongoose.connect(connectionString, options);

    // Connected handler
    mongoose.connection.on('connected', function (err) {
      console.log("Connected to DB using chain: " + db.host + ":" + db.port + "/" + db.dbName);
    });

    // Error handler
    mongoose.connection.on('error', function (err) {
      console.log("MongoDB Error: ", err);
    });

    // Reconnect when closed
    mongoose.connection.on('disconnected', function () {
       //self.connectToDatabase();
       console.log("disconnected");
    });
} else {
    var db = config.database['local'];
    var connectionString = "mongodb://" + db.host + ":" + db.port + "/" + db.dbName;
    console.log("connectionString : ", connectionString);
    mongoose.connect(connectionString, function(err){
        if(err){
            console.log(err)
        } else{
            console.log('Connected to database ' + db.dbName);
        }
    });
}
